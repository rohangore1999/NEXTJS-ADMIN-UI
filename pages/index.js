import Head from 'next/head'
import { useEffect, useState } from 'react'
import { FaPen, FaRegTrashAlt } from 'react-icons/fa';
import Pagination from '../components/Pagination';

var deleteDatas;

export default function Home({ data }) {
  const [Cdata, setData] = useState(data)
  const [currentPage, setCurrentPage] = useState(1)
  const [postsPerPage, setPostsPerPage] = useState(10)

  // Initializing the empty input field
  const [filteredData, setFilteredData] = useState('')

  // const [deleteData, setDeleteData] = useState()
  const [editData, setEditData] = useState()

  // All check
  const [checkedStateAll, setCheckedStateAll] = useState([])


  const [checkedState, setCheckedState] = useState(
    new Array(data.length).fill(false))

  // useEffect(() => {
  //   fetch('https://geektrust.s3-ap-southeast-1.amazonaws.com/adminui-problem/members.json')
  //     .then(res => res.json())
  //     .then((res) => setData(res))
  //     .catch((err) => {
  //       console.log(err)
  //     })
  // }, [])

  // To delete normal data
  const deleteDataItem = (dataItem) => {
    console.log("Item to Deleted ", dataItem)

    setData(Cdata.filter(item => item.id != dataItem))
  }


  // To delete Filtered Data

  const deleteFilteredDataItem = (dataItem) => {
    console.log("Item to Deleted ", dataItem)

    setFilteredData(filteredData.filter(item => item.id != dataItem))

  }

  const deleteSelected = () => {
    let tempData = []

    for (let i = 0; i < Cdata.length; i++) {
      if (checkedState[i] !== true) {
        tempData.push(Cdata[i])
      }
    }

    console.log(tempData)
    deleteDatas = tempData
    setCheckedState(new Array(data.length).fill(false))
  }

  const deleteSelectedFiltered = () => {
    let tempData = []

    for (let i = 0; i < filteredData.length; i++) {
      if (checkedState[i] !== true) {
        tempData.push(filteredData[i])
      }
    }

    console.log(tempData)
    deleteDatas = tempData
    setCheckedState(new Array(data.length).fill(false))
  }




  // to show data when no search
  const indexOfLastPost = currentPage * postsPerPage // 1 * 10 = 10
  const indexOfFirstPost = indexOfLastPost - postsPerPage // 10 - 10 = 0
  const currentPosts = Cdata.slice(indexOfFirstPost, indexOfLastPost) // .slice(0, 10)

  const filteredDatas = filteredData.slice(indexOfFirstPost, indexOfLastPost) // .slice(0, 10)
  const deleteData = deleteDatas?.slice(indexOfFirstPost, indexOfLastPost)



  // to navitage particular page
  const paginate = (pageNumber) => {
    setCurrentPage(pageNumber)
  }


  const myDebounce = (cb, d) => {
    let timer;
    return (...args) => {
      if (timer) clearTimeout(timer)
      timer = setTimeout(() => {
        cb(...args)
      }, d)
    }
  }

  const handleChange = myDebounce((e) => {
    console.log(e.target.value)
    let inpu = e.target.value
    // if the input field is not empty
    if (e.target.value !== '') {
      setFilteredData(Cdata.filter((currentPost) => {
        if (currentPost.name.includes(inpu) | currentPost.email.includes(inpu) | currentPost.role.includes(inpu)) {
          console.log(currentPost)
          return currentPost
        }
      })
      )
    }
    else if (e.target.value === '') {
      setFilteredData('')
    }
  }, 300)

  const handleCheckChange = (position) => {
    console.log(position)
    const updatedCheckedState = checkedState.map((item, index) =>
      index === position ? !item : item
    );

    setCheckedState(updatedCheckedState);
    console.log(updatedCheckedState)

  }

  const handleCheckChangeAll = () => {
    let updatedCheckedStateAll = new Array(data.length).fill(false)
    
    // console.log(updatedCheckedStateAll)

    for (let i = 0; i <= Cdata.length; i++) {
      console.log(">>>> ", updatedCheckedStateAll[(currentPosts[i]?.id) - 1], !updatedCheckedStateAll[(currentPosts[i]?.id) - 1])
      updatedCheckedStateAll[(currentPosts[i]?.id) - 1] =
        updatedCheckedStateAll[(currentPosts[i]?.id) - 1] === false ? !updatedCheckedStateAll[(currentPosts[i]?.id) - 1] :
          updatedCheckedStateAll[(currentPosts[i]?.id) - 1] === undefined && false
    }

    console.log(updatedCheckedStateAll)

    setCheckedState(updatedCheckedStateAll);
  }

  console.log(checkedState)
  console.log(currentPosts)


  return (
    <div className='bg-white'>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div className='flex items-center justify-center p-5 max-w-screen-xl mx-auto'>
        {/* search */}
        <div className='flex items-center flex-1 h-10 w-full'>
          <input onChange={handleChange} className='flex-1 w-6 h-full outline-none rounded-md p-5 bg-gray-100 hover:shadow-md focus:shadow-md bg-transparent border-2 focus:border-gray-300' placeholder='Search by Name, Email or Role' type={'text'} />
        </div>
      </div>

      {/* table */}
      <div className='flex items-center justify-center p-5 max-w-screen-xl mx-auto h-screen -my-24'>
        <table className='w-full'>
          <thead className='border-b-2 border-gray-200'>
            <tr>

              <th className='p-3 text-sm font-semibold text-left tracking-wide'><input type="checkbox" onChange={handleCheckChangeAll} checked={checkedState.forEach((x) => x ? true : false)} type="checkbox" /></th>

              <th className='p-3 text-sm font-semibold text-left tracking-wide'>Name</th>
              <th className='p-3 text-sm font-semibold text-left tracking-wide'>Email</th>
              <th className='p-3 text-sm font-semibold text-left tracking-wide'>Role</th>
              <th className='p-3 text-sm font-semibold text-left tracking-wide'>Actions</th>
            </tr>
          </thead>

          <tbody>

            {
              filteredData === '' ? (
                deleteData ? (
                  deleteData.map((item, idx) => (
                    <tr key={item.id} className={`${checkedState[idx] ? 'bg-gray-300' : 'bg-white'}`}>

                      <td className='p-3 text-sm text-gray-700'><input onChange={() => handleCheckChange(idx)} checked={checkedState[idx]} type="checkbox" name={item.id} /></td>
                      <td className='p-3 text-sm text-gray-700'>{item.name}</td>
                      <td className='p-3 text-sm text-gray-700'>{item.email}</td>
                      <td className='p-3 text-sm text-gray-700'>{item.role}</td>
                      <td className='p-3 text-sm text-gray-700'><span className='flex space-x-4 text-base'><FaPen onClick={() => { setEditData(item) }} className='text-gray-500 cursor-pointer hover:scale-125 ease-out transition transform active:scale-90' /><FaRegTrashAlt onClick={() => { deleteDataItem(item.id) }} className='text-red-500 cursor-pointer hover:scale-125 ease-out transition transform active:scale-90' /></span></td>
                    </tr>
                  ))
                ) :

                  (
                    currentPosts.map((item, idx) => (
                      <tr key={item.id} className={`${checkedState[idx] ? 'bg-gray-300' : 'bg-white'}`}>

                        <td className='p-3 text-sm text-gray-700'><input onChange={() => handleCheckChange(idx)} checked={checkedState[idx]} type="checkbox" name={item.id} /></td>
                        <td className='p-3 text-sm text-gray-700'>{item.name}</td>
                        <td className='p-3 text-sm text-gray-700'>{item.email}</td>
                        <td className='p-3 text-sm text-gray-700'>{item.role}</td>
                        <td className='p-3 text-sm text-gray-700'><span className='flex space-x-4 text-base'><FaPen onClick={() => { setEditData(item) }} className='text-gray-500 cursor-pointer hover:scale-125 ease-out transition transform active:scale-90' /><FaRegTrashAlt onClick={() => { deleteDataItem(item.id) }} className='text-red-500 cursor-pointer hover:scale-125 ease-out transition transform active:scale-90' /></span></td>
                      </tr>
                    ))
                  )

              ) : (
                deleteData ?
                  (
                    deleteData.map((item, idx) => (
                      <tr key={item.id} className={`${checkedState[idx] ? 'bg-gray-300' : 'bg-white'}`}>

                        <td className='p-3 text-sm text-gray-700'><input onChange={() => handleCheckChange(idx)} checked={checkedState[idx]} type="checkbox" name="name1" /></td>
                        <td className='p-3 text-sm text-gray-700'>{item.name}</td>
                        <td className='p-3 text-sm text-gray-700'>{item.email}</td>
                        <td className='p-3 text-sm text-gray-700'>{item.role}</td>
                        <td className='p-3 text-sm text-gray-700'><span className='flex space-x-4 text-base'>
                          <FaPen onClick={() => { setEditData(item) }} className='text-gray-500 cursor-pointer hover:scale-125 ease-out transition transform active:scale-90' />
                          <FaRegTrashAlt onClick={() => { deleteFilteredDataItem(item.id) }} className='text-red-500 cursor-pointer hover:scale-125 ease-out transition transform active:scale-90' /></span></td>
                      </tr>
                    ))
                  ) :
                  (
                    filteredDatas.map((item, idx) => (
                      <tr key={item.id} className={`${checkedState[idx] ? 'bg-gray-300' : 'bg-white'}`}>

                        <td className='p-3 text-sm text-gray-700'><input onChange={() => handleCheckChange(idx)} checked={checkedState[idx]} type="checkbox" name="name1" /></td>
                        <td className='p-3 text-sm text-gray-700'>{item.name}</td>
                        <td className='p-3 text-sm text-gray-700'>{item.email}</td>
                        <td className='p-3 text-sm text-gray-700'>{item.role}</td>
                        <td className='p-3 text-sm text-gray-700'><span className='flex space-x-4 text-base'>
                          <FaPen onClick={() => { setEditData(item) }} className='text-gray-500 cursor-pointer hover:scale-125 ease-out transition transform active:scale-90' />
                          <FaRegTrashAlt onClick={() => { deleteFilteredDataItem(item.id) }} className='text-red-500 cursor-pointer hover:scale-125 ease-out transition transform active:scale-90' /></span></td>
                      </tr>
                    ))
                  )

              )
            }
          </tbody>


        </table>
      </div>

      <div className='flex items-center justify-center p-5 max-w-screen-xl mx-auto'>

        {/* delete button */}
        {filteredData.length !== 0 ?
          (<button className='text-white bg-red-500 px-4 py-4 shadow-md rounded-full my-3 hover:scale-105 hover:shadow-xl hover:opacity-[0.9] active:scale-90 transition duration-150 ease-out' onClick={() => deleteSelectedFiltered()}>Delete Selected</button>)
          : (
            <button className='text-white bg-red-500 px-4 py-4 shadow-md rounded-full my-3 hover:scale-105 hover:shadow-xl hover:opacity-[0.9] active:scale-90 transition duration-150 ease-out' onClick={() => deleteSelected()}>Delete Selected</button>)
        }



        {/* if filtered data's length is not 0 then show Pagination */}
        {filteredData.length !== 0 &&
          (<Pagination postsPerPage={postsPerPage} totalPosts={Cdata.length} totalFilteredPost={filteredData.length} paginate={paginate} />)
        }

        {/* if filtered data's length is '' (which means initial state) then show Pagination */}
        {
          filteredData === '' &&
          (<Pagination postsPerPage={postsPerPage} totalPosts={Cdata.length} totalFilteredPost={filteredData.length} paginate={paginate} />)
        }
      </div>
    </div >
  )
}


// Using Server Side Rendering

export async function getServerSideProps(context) {

  // sending GET request to "https://link.papareact.com/products"
  const data = await fetch("https://geektrust.s3-ap-southeast-1.amazonaws.com/adminui-problem/members.json")
    .then(res => res.json())


  return {
    props: {
      data
    }
  }
}